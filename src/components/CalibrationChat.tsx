import React, { useState, useEffect, useRef } from 'react';
import { Button } from './ui/button';
import { Send, Bot, User, X, Edit, MessageSquare } from 'lucide-react';
import { MISTRAL_CONFIG } from '../config/mistral-config.js';
import InlineFieldInput from './InlineFieldInput';
import WhatsAppSimulator from './WhatsAppSimulator';
import LandingPage from './LandingPage';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'assistant';
  timestamp: Date;
  type?: 'text' | 'whatsapp' | 'field' | 'completion';
  fieldData?: any;
}

interface AgentData {
  businessName: string;
  businessType: string;
  businessInfo: string;
  personality: string;
  welcomeMessage: string;
  template: string;
  workingHours: string;
  services: string;
  location: string;
  paymentMethods: string;
  contactPhone: string;
  hasDelivery?: boolean;
  deliveryFee?: string;
  acceptsReservations?: boolean;
  deliveryArea?: string;
}

interface CalibrationChatProps {
  agentData: AgentData;
  onAgentUpdate: (updates: Partial<AgentData>) => void;
}

// CONFIGURA√á√ÉO √öNICA SEM DUPLICA√á√ïES
const CONFIG_FIELDS = [
  {
    step: 'businessName',
    title: 'Nome',
    question: 'Qual √© o nome do seu neg√≥cio?',
    fieldType: 'text',
    placeholder: 'Ex: Amor Pizzaria'
  },
  {
    step: 'contactPhone',
    title: 'WhatsApp',
    question: 'Qual seu WhatsApp?',
    fieldType: 'phone',
    placeholder: 'Ex: 11999887766'
  },
  {
    step: 'location',
    title: 'Endere√ßo',
    question: 'Qual o endere√ßo?',
    fieldType: 'textarea',
    placeholder: 'Ex: Rua das Flores, 123 - Centro'
  },
  {
    step: 'workingHours',
    title: 'Hor√°rios',
    question: 'Hor√°rios de funcionamento?',
    fieldType: 'textarea',
    placeholder: 'Ex: Seg-Sex: 8h-18h'
  },
  {
    step: 'services',
    title: 'Produtos/Servi√ßos',
    question: 'O que voc√™ oferece?',
    fieldType: 'textarea',
    placeholder: 'Ex: Pizza Margherita R$25, Calabresa R$30'
  },
  {
    step: 'paymentMethods',
    title: 'Pagamento',
    question: 'Formas de pagamento?',
    fieldType: 'text',
    placeholder: 'Ex: PIX, Cart√£o, Dinheiro'
  },
  {
    step: 'hasDelivery',
    title: 'Entrega',
    question: 'Faz entrega?',
    fieldType: 'buttons',
    options: [
      { value: 'true', label: '‚úÖ Sim' },
      { value: 'false', label: '‚ùå N√£o' }
    ]
  },
  {
    step: 'acceptsReservations',
    title: 'Agendamento',
    question: 'Aceita agendamentos?',
    fieldType: 'buttons',
    options: [
      { value: 'true', label: '‚úÖ Sim' },
      { value: 'false', label: '‚ùå N√£o' }
    ]
  }
];

// SISTEMA DE CONHECIMENTO COMPLETO - FuncionarioPro
const SISTEMA_CONHECIMENTO = {
  nome: "FuncionarioPro",
  descricao: "Seu atendente virtual premium, treinado pra responder clientes, agendar, vender e aumentar sua receita ‚Äî tudo 100% autom√°tico, no WhatsApp. Configure em 2 minutos, personalize pra qualquer nicho e comece a vender enquanto voc√™ dorme.",
  whatsapp_suporte: "+551132300474",
  link_whatsapp_suporte: "https://wa.me/551132300474?text=Ol√°%2C%20preciso%20de%20ajuda%20com%20o%20FuncionarioPro",
  
  planos: {
    mensal: {
      nome: "Plano Mensal",
      preco: "R$ 49,90",
      preco_original: "R$ 59,90",
      desconto_cupom: "R$ 10,00",
      cupom: "FUNCIONARIO10",
      beneficios: [
        "Atendimento autom√°tico 24h",
        "Respostas inteligentes personalizadas",
        "Integra√ß√£o completa WhatsApp",
        "At√© 1.000 mensagens/m√™s",
        "Configura√ß√£o ilimitada",
        "Suporte priorit√°rio"
      ],
      limitacoes: "At√© 1.000 mensagens por m√™s"
    },
    anual: {
      nome: "Plano Anual (12 meses)",
      preco: "R$ 499,00",
      preco_original: "R$ 599,00",
      desconto_cupom: "R$ 100,00",
      cupom: "FUNCIONARIO100",
      preco_mensal_equivalente: "R$ 41,58/m√™s",
      beneficios: [
        "Atendimento autom√°tico 24h",
        "Respostas inteligentes personalizadas", 
        "Integra√ß√£o completa WhatsApp",
        "Mensagens ILIMITADAS",
        "Configura√ß√£o ilimitada",
        "Suporte VIP priorit√°rio",
        "2 meses GR√ÅTIS"
      ],
      limitacoes: "Ilimitado"
    }
  },

  funcionalidades: [
    "Atendimento autom√°tico 24 horas por dia",
    "Respostas inteligentes e personalizadas",
    "Agendamento autom√°tico de consultas/servi√ßos", 
    "Sistema de vendas automatizado",
    "Integra√ß√£o nativa com WhatsApp",
    "Configura√ß√£o em menos de 2 minutos",
    "Personaliza√ß√£o para qualquer nicho de neg√≥cio",
    "Suporte a delivery e retirada",
    "Gest√£o de hor√°rios de funcionamento",
    "Cat√°logo de produtos/servi√ßos integrado"
  ],

  casos_uso: [
    {
      area: "Restaurantes e Delivery",
      beneficios: "Pedidos autom√°ticos, card√°pio digital, confirma√ß√£o de entrega",
      resultado: "Aumento de 300% nos pedidos noturnos"
    },
    {
      area: "Cl√≠nicas e Consult√≥rios", 
      beneficios: "Agendamento autom√°tico, confirma√ß√£o de consultas, lembretes",
      resultado: "Redu√ß√£o de 80% no tempo de atendimento"
    },
    {
      area: "Sal√µes de Beleza",
      beneficios: "Agendamento por especialidade, cat√°logo de servi√ßos, confirma√ß√µes",
      resultado: "Aumento de 250% na ocupa√ß√£o da agenda"
    },
    {
      area: "Lojas e E-commerce",
      beneficios: "Cat√°logo automatizado, processamento de pedidos, suporte a vendas",
      resultado: "Crescimento de 400% nas vendas online"
    }
  ],

  diferenciais: [
    "100% Personalizado para seu neg√≥cio",
    "Respostas Inteligentes com IA avan√ßada", 
    "Mais Vendas garantidas automaticamente",
    "Configura√ß√£o ultra-r√°pida (2 minutos)",
    "Sem necessidade de conhecimento t√©cnico",
    "Funciona 24h mesmo quando voc√™ dorme",
    "Integra√ß√£o nativa WhatsApp (n√£o √© bot)"
  ]
};

// TEMPLATES MINIMALISTAS
const TEMPLATES = {
  restaurante: {
    icon: 'üçï',
    title: 'Restaurante',
    businessType: 'restaurante',
    hasDelivery: true,
    acceptsReservations: true,
    personality: 'atencioso e prestativo',
    welcomeMessage: 'Ol√°! Bem-vindo(a) ao {businessName}! Como posso ajud√°-lo(a) hoje?'
  },
  loja: {
    icon: 'üè™',
    title: 'Loja',
    businessType: 'loja',
    hasDelivery: false,
    acceptsReservations: false,
    personality: 'amig√°vel e informativo',
    welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Posso ajud√°-lo(a)?'
  },
  clinica: {
    icon: 'üè•',
    title: 'Cl√≠nica',
    businessType: 'clinica',
    hasDelivery: false,
    acceptsReservations: true,
    personality: 'profissional e acolhedor',
    welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Gostaria de agendar?'
  },
  salao: {
    icon: 'üíÑ',
    title: 'Sal√£o',
    businessType: 'salao',
    hasDelivery: false,
    acceptsReservations: true,
    personality: 'carinhoso e atencioso',
    welcomeMessage: 'Ol√°! Bem-vindo(a) ao {businessName}! Vamos cuidar da sua beleza?'
  },
  oficina: {
    icon: 'üîß',
    title: 'Oficina',
    businessType: 'oficina',
    hasDelivery: false,
    acceptsReservations: true,
    personality: 'profissional e confi√°vel',
    welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Precisa de servi√ßo?'
  },
  hotel: {
    icon: 'üè®',
    title: 'Hotel',
    businessType: 'hotel',
    hasDelivery: false,
    acceptsReservations: true,
    personality: 'hospitaleiro e prestativo',
    welcomeMessage: 'Ol√°! Bem-vindo(a) ao {businessName}! Posso ajudar com sua reserva?'
  },
  academia: {
    icon: 'üí™',
    title: 'Academia',
    businessType: 'academia',
    hasDelivery: false,
    acceptsReservations: true,
    personality: 'motivador e energ√©tico',
    welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Vamos treinar?'
  },
  petshop: {
    icon: 'üêï',
    title: 'Pet Shop',
    businessType: 'petshop',
    hasDelivery: true,
    acceptsReservations: true,
    personality: 'carinhoso e atencioso',
    welcomeMessage: 'Ol√°! Bem-vindo(a) ao {businessName}! Como posso cuidar do seu pet?'
  },
  farmacia: {
    icon: 'üíä',
    title: 'Farm√°cia',
    businessType: 'farmacia',
    hasDelivery: true,
    acceptsReservations: false,
    personality: 'profissional e cuidadoso',
    welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Precisa de algum medicamento?'
  },
  escola: {
    icon: 'üìö',
    title: 'Escola',
    businessType: 'escola',
    hasDelivery: false,
    acceptsReservations: true,
    personality: 'educativo e acolhedor',
    welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Como posso ajudar?'
  },
  outro: {
    icon: 'üíº',
    title: 'Outro',
    businessType: 'outro',
    hasDelivery: false,
    acceptsReservations: false,
    personality: 'profissional e atencioso',
    welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Como posso ajud√°-lo(a)?'
  }
};

interface ConfigData {
  isConfiguring: boolean;
  isShowingField: boolean;
}

const CalibrationChat: React.FC<CalibrationChatProps> = ({ agentData, onAgentUpdate }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showTemplates, setShowTemplates] = useState(true);
  const [currentStep, setCurrentStep] = useState(0);
  const [configData, setConfigData] = useState<ConfigData>({
    isConfiguring: false,
    isShowingField: false
  });
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // PLACEHOLDER ANIMADO COM EFEITO DE DIGITA√á√ÉO - Estilo Lovable
  const [placeholderIndex, setPlaceholderIndex] = useState(0);
  const [currentPlaceholder, setCurrentPlaceholder] = useState('');
  const [isTyping, setIsTyping] = useState(true);
  
  const placeholders = [
    "Quero um funcion√°rio para advocacia...",
    "Preciso de atendimento para restaurante...", 
    "Quero automatizar meu sal√£o de beleza...",
    "Preciso de um assistente para cl√≠nica...",
    "Quero atendimento 24h para minha loja...",
    "Preciso automatizar minha oficina...",
    "Quero um atendente para pet shop...",
    "Preciso de automa√ß√£o para farm√°cia..."
  ];

  // Efeito de digita√ß√£o do placeholder
  useEffect(() => {
    let timeout: NodeJS.Timeout;
    
    const typeText = () => {
      const fullText = placeholders[placeholderIndex];
      let charIndex = 0;
      setCurrentPlaceholder('');
      setIsTyping(true);
      
      const typeChar = () => {
        if (charIndex < fullText.length) {
          setCurrentPlaceholder(fullText.substring(0, charIndex + 1));
          charIndex++;
          timeout = setTimeout(typeChar, 50); // Velocidade de digita√ß√£o
        } else {
          // Texto completo digitado, aguardar antes de apagar
          timeout = setTimeout(() => {
            eraseText();
          }, 2000); // Tempo para ler
        }
      };
      
      const eraseText = () => {
        setIsTyping(false);
        let eraseIndex = fullText.length;
        
        const eraseChar = () => {
          if (eraseIndex > 0) {
            setCurrentPlaceholder(fullText.substring(0, eraseIndex - 1));
            eraseIndex--;
            timeout = setTimeout(eraseChar, 30); // Velocidade de apagar
          } else {
            // Texto apagado, pr√≥ximo texto
            setPlaceholderIndex((prev) => (prev + 1) % placeholders.length);
            timeout = setTimeout(typeText, 500); // Pausa antes do pr√≥ximo
          }
        };
        
        eraseChar();
      };
      
      typeChar();
    };
    
    typeText();
    
    return () => {
      if (timeout) clearTimeout(timeout);
    };
  }, [placeholderIndex]);

  // Fun√ß√£o para gerar IDs √∫nicos
  const generateUniqueId = () => `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

  // Fun√ß√µes helper para mostrar configura√ß√µes padr√£o
  const getDefaultHours = (type: string) => {
    const schedules = {
      'clinica': 'Seg-Sex: 8h-18h',
      'restaurante': 'Todos os dias: 11h-23h',
      'salao': 'Ter-S√°b: 9h-19h',
      'oficina': 'Seg-Sex: 8h-18h',
      'loja': 'Seg-Sex: 9h-18h, S√°b: 9h-14h',
      'academia': 'Seg-Sex: 6h-22h, S√°b: 8h-18h',
      'petshop': 'Seg-S√°b: 8h-18h',
      'farmacia': 'Todos os dias: 7h-22h',
      'escola': 'Seg-Sex: 7h-18h'
    };
    return schedules[type] || 'Seg-Sex: 8h-18h';
  };

  const getDefaultServices = (type: string) => {
    const services = {
      'clinica': 'Consultas e tratamentos',
      'restaurante': 'Pratos, lanches e bebidas',
      'salao': 'Cortes, colora√ß√£o, manicure',
      'oficina': 'Manuten√ß√£o e reparos',
      'loja': 'Produtos variados',
      'academia': 'Muscula√ß√£o e aulas',
      'petshop': 'Produtos e servi√ßos pet',
      'farmacia': 'Medicamentos e produtos',
      'escola': 'Ensino e atividades'
    };
    return services[type] || 'Produtos e servi√ßos';
  };

  const getDefaultPayments = (type: string) => {
    const payments = {
      'clinica': 'PIX, Cart√£o, Conv√™nios',
      'restaurante': 'PIX, Cart√£o, Dinheiro, VR',
      'salao': 'PIX, Cart√£o, Dinheiro',
      'oficina': 'PIX, Cart√£o, Dinheiro',
      'loja': 'PIX, Cart√£o, Dinheiro',
      'academia': 'PIX, Cart√£o, D√©bito autom√°tico',
      'petshop': 'PIX, Cart√£o, Dinheiro',
      'farmacia': 'PIX, Cart√£o, Conv√™nios',
      'escola': 'PIX, Cart√£o, Boleto'
    };
    return payments[type] || 'PIX, Cart√£o, Dinheiro';
  };

  const getDefaultDelivery = (type: string) => {
    return ['restaurante', 'farmacia', 'petshop', 'loja'].includes(type);
  };

  const getDefaultReservations = (type: string) => {
    return ['clinica', 'salao', 'oficina', 'academia', 'escola'].includes(type);
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Processar mensagem inicial ou template da landing page
  useEffect(() => {
    const initialMessage = sessionStorage.getItem('initialMessage');
    const selectedTemplate = sessionStorage.getItem('selectedTemplate');

    if (initialMessage) {
      // Limpar sessionStorage
      sessionStorage.removeItem('initialMessage');
      
      // Processar mensagem inicial
      const userMessage: Message = {
        id: generateUniqueId(),
        content: initialMessage,
        sender: 'user',
        timestamp: new Date()
      };
      
      setMessages([userMessage]);
      setShowTemplates(false);
      
      // Processar com delay
      setTimeout(() => {
        handleChat(initialMessage);
      }, 500);
      
    } else if (selectedTemplate) {
      // Limpar sessionStorage
      sessionStorage.removeItem('selectedTemplate');
      
      // Aplicar template
      setShowTemplates(false);
      applyTemplate(selectedTemplate);
    }
  }, []);

  // Carregar dados salvos na sessionStorage
  useEffect(() => {
    try {
      const savedData = sessionStorage.getItem('functionarioIA_data');
      if (savedData) {
        const parsedData = JSON.parse(savedData);
        // Verificar se h√° dados salvos e se o agentData est√° vazio
        if (parsedData && (!agentData.businessName || agentData.businessName === '')) {
          console.log('üìÇ Carregando dados salvos da sess√£o:', parsedData);
          onAgentUpdate(parsedData);
          
          const loadedMessage: Message = {
            id: generateUniqueId(),
            content: `‚úÖ **Seus dados foram carregados!**

Bem-vindo de volta ao FuncionarioPro. Sua configura√ß√£o anterior foi recuperada:

**üè¢ Nome:** ${parsedData.businessName}
**üì± WhatsApp:** ${parsedData.contactPhone || '-'}
**üöö Entrega:** ${parsedData.hasDelivery ? '‚úÖ Sim' : '‚ùå N√£o'}
**üìÖ Agendamento:** ${parsedData.acceptsReservations ? '‚úÖ Sim' : '‚ùå N√£o'}

O que gostaria de fazer agora?`,
            sender: 'assistant',
            timestamp: new Date(),
            type: 'field',
            fieldData: {
              fieldName: 'loadedConfig',
              fieldLabel: 'Pr√≥xima A√ß√£o',
              fieldType: 'buttons',
              options: [
                { value: 'test_now', label: 'üß™ Testar funcionamento' },
                { value: 'edit_config', label: '‚úèÔ∏è Editar configura√ß√£o' },
                { value: 'reset_config', label: 'üîÑ Come√ßar do zero' }
              ]
            }
          };
          
          setMessages(prev => [loadedMessage]);
          setShowTemplates(false); // N√£o mostrar templates se temos dados
        }
      }
    } catch (e) {
      console.error('Erro ao carregar dados da sess√£o:', e);
    }
  }, []);

  useEffect(() => {
    if (configData.isShowingField && configData.isConfiguring && !configData.isShowingField) {
      setConfigData({ ...configData, isShowingField: false });
      showCurrentStepField();
    }
  }, [configData.isShowingField, configData.isConfiguring, currentStep]);

  useEffect(() => {
    const handleOpenWhatsAppInline = (event: any) => {
      const whatsappMessage: Message = {
        id: Date.now().toString(),
        content: 'üì± **Teste no WhatsApp**',
        sender: 'assistant',
        timestamp: new Date(),
        type: 'whatsapp'
      };
      setMessages(prev => [...prev, whatsappMessage]);
    };

    const handleTestButton = (event: any) => {
      // Abrir simulador diretamente em nova linha do chat
      const testMessage: Message = {
        id: generateUniqueId(),
        content: 'Iniciando teste do seu funcion√°rio virtual...',
        sender: 'assistant',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, testMessage]);

      // Mostrar simulador na pr√≥xima linha ap√≥s pequeno delay
      setTimeout(() => {
        const whatsappMessage: Message = {
          id: generateUniqueId(),
          content: 'Teste seu funcion√°rio virtual:',
          sender: 'assistant',
          timestamp: new Date(),
          type: 'whatsapp'
        };
        setMessages(prev => [...prev, whatsappMessage]);
      }, 1500);
    };

    window.addEventListener('openWhatsAppInline', handleOpenWhatsAppInline);
    window.addEventListener('testButtonClicked', handleTestButton);
    
    return () => {
      window.removeEventListener('openWhatsAppInline', handleOpenWhatsAppInline);
      window.removeEventListener('testButtonClicked', handleTestButton);
    };
  }, []);

  const scrollToBottom = () => {
    setTimeout(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, 100);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // EXPERI√äNCIA ESTILO LOVABLE - FULL SCREEN LAYOUT
  const renderTemplates = () => (
    <div className="flex-1 flex flex-col justify-center items-center px-4 py-8 bg-white min-h-screen">
      {/* Header Minimalista */}
      <div className="text-center mb-12 max-w-4xl mx-auto">
        <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
          Crie seu <span className="text-black">FuncionarioPro</span>
        </h1>
        <p className="text-lg md:text-2xl text-gray-600 mb-12 max-w-3xl mx-auto leading-relaxed">
          Atendente virtual que responde clientes, agenda automaticamente e aumenta vendas 24h no WhatsApp
        </p>
        
        {/* Selos Pequenos */}
        <div className="flex justify-center items-center gap-8 text-sm text-gray-500 mb-16">
          <span className="flex items-center gap-2">
            <div className="w-2 h-2 bg-black rounded-full"></div>
            100% Personalizado
          </span>
          <span className="flex items-center gap-2">
            <div className="w-2 h-2 bg-black rounded-full"></div>
            Respostas Humanas
          </span>
          <span className="flex items-center gap-2">
            <div className="w-2 h-2 bg-black rounded-full"></div>
            Mais Vendas
          </span>
          </div>
        </div>

      {/* INPUT GIGANTE CENTRALIZADO ESTILO LOVABLE */}
      <div className="w-full max-w-5xl mb-12">
        <div className="relative">
          <textarea
            value={currentMessage}
            onChange={(e) => setCurrentMessage(e.target.value)}
            onKeyPress={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
              }
            }}
            placeholder={currentPlaceholder + (isTyping ? '|' : '')}
            className="w-full h-40 md:h-48 px-8 py-8 text-xl md:text-2xl bg-white border-2 border-gray-200 rounded-3xl
              focus:outline-none focus:border-black focus:ring-4 focus:ring-black/5
              placeholder-gray-400 shadow-xl resize-none transition-all duration-300
              hover:border-gray-300 hover:shadow-2xl"
            style={{ 
              fontSize: 'clamp(18px, 3vw, 24px)',
              lineHeight: '1.4'
            }}
          />
          
          {/* Bot√£o de Envio */}
          <button
            onClick={() => sendMessage()}
            disabled={!currentMessage.trim() || isLoading}
            className="absolute bottom-6 right-6 bg-black hover:bg-gray-800 disabled:bg-gray-300 
              text-white rounded-2xl p-4 transition-all duration-200 shadow-xl
              disabled:cursor-not-allowed hover:scale-105 active:scale-95"
          >
            {isLoading ? (
              <div className="animate-spin rounded-full h-7 w-7 border-2 border-white border-t-transparent"></div>
            ) : (
              <svg className="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
              </svg>
            )}
          </button>
        </div>
      </div>

      {/* Modelos Pequenos - Quase Impercept√≠veis */}
      <div className="w-full max-w-4xl mb-8">
        <p className="text-center text-sm text-gray-400 mb-4 font-medium">
          Ou escolha um modelo:
        </p>
        <div className="grid grid-cols-4 sm:grid-cols-6 lg:grid-cols-8 gap-3">
          {Object.entries(TEMPLATES).map(([key, template]) => (
            <button
              key={key}
              onClick={() => applyTemplate(key)}
              className="flex flex-col items-center gap-1 p-3 rounded-xl hover:bg-gray-50 transition-all text-center group"
            >
              <div className="text-lg group-hover:scale-110 transition-transform opacity-70">
                {template.icon}
              </div>
              <span className="text-xs text-gray-500 font-medium leading-tight">
                {template.title}
              </span>
            </button>
          ))}
        </div>
        </div>

      {/* A√ß√µes Discretas */}
      <div className="flex flex-col sm:flex-row items-center gap-6 text-sm text-gray-400">
        <button
          onClick={() => {
            setShowTemplates(false);
            const startMessage: Message = {
              id: Date.now().toString(),
              content: 'Vamos configurar seu atendente virtual personalizado!\n\nVou te fazer algumas perguntas para criar o assistente perfeito para seu neg√≥cio.',
              sender: 'assistant',
              timestamp: new Date()
            };
            setMessages([startMessage]);
            setTimeout(() => {
              const defaultData = {
                businessName: '',
                businessType: '',
                contactPhone: '',
                location: '',
                workingHours: '',
                services: '',
                paymentMethods: '',
                hasDelivery: false,
                acceptsReservations: false
              };
              showConfigStep(0, defaultData);
            }, 1000);
          }}
          className="hover:text-gray-600 underline transition-colors"
        >
          Configura√ß√£o personalizada
        </button>
        
        <span className="hidden sm:block">‚Ä¢</span>
        
        <a
          href="https://wa.me/551132300474?text=Ol√°%2C%20preciso%20de%20ajuda%20com%20o%20FuncionarioPro"
          target="_blank"
          rel="noopener noreferrer"
          className="hover:text-gray-600 underline transition-colors"
        >
          Precisa de ajuda?
        </a>
      </div>
    </div>
  );

  const sendMessage = async (customMessage?: string) => {
    const messageToSend = customMessage || currentMessage.trim();
    
    if (!messageToSend) return;
    
    const userMessage: Message = {
      id: Date.now().toString(),
      content: messageToSend,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');

    if (showTemplates) {
      setShowTemplates(false);
    }

    await handleChat(messageToSend);
  };

  const handleChat = async (message: string) => {
    setIsLoading(true);
    
    try {
      // 1. PRIMEIRO, VERIFICAR SE √â UM COMANDO DE CONFIGURA√á√ÉO (mencionou profiss√£o)
      const businessType = detectBusinessType(message);
      if (businessType && (message.toLowerCase().includes('sou ') || message.toLowerCase().includes('tenho um') || message.toLowerCase().includes('minha √°rea √©'))) {
        await startStepByStepConfig(businessType, extractBusinessNameFromMessage(message));
        return;
      }

      // 2. SE N√ÉO FOR CONFIGURA√á√ÉO, USAR A IA PARA RESPOSTAS INTELIGENTES E PERSUASIVAS
      await handleGeneralChat(message);
      
    } catch (error) {
      console.error('‚ùå Erro no chat:', error);
      const errorMessage: Message = {
        id: Date.now().toString(),
        content: '‚ùå Ops, tive um probleminha! Pode tentar novamente? üòÖ',
        sender: 'assistant',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // DETECTAR COMANDOS DE EDI√á√ÉO
  const detectEditCommand = (message: string): boolean => {
    const editKeywords = ['alterar', 'mudar', 'editar', 'corrigir', 'modificar', 'trocar'];
    const fieldKeywords = ['nome', 'telefone', 'whatsapp', 'endere√ßo', 'hor√°rio', 'produto', 'servi√ßo', 'pagamento'];
    
    const msg = message.toLowerCase();
    const hasEditKeyword = editKeywords.some(keyword => msg.includes(keyword));
    const hasFieldKeyword = fieldKeywords.some(keyword => msg.includes(keyword));
    
    return hasEditKeyword || hasFieldKeyword;
  };

  // PROCESSAR COMANDO DE EDI√á√ÉO
  const handleEditCommand = async (message: string) => {
    const msg = message.toLowerCase();
    
    let fieldToEdit = '';
    
    if (msg.includes('nome')) fieldToEdit = 'businessName';
    else if (msg.includes('telefone') || msg.includes('whatsapp')) fieldToEdit = 'contactPhone';
    else if (msg.includes('endere√ßo') || msg.includes('endereco')) fieldToEdit = 'location';
    else if (msg.includes('hor√°rio') || msg.includes('horario')) fieldToEdit = 'workingHours';
    else if (msg.includes('produto') || msg.includes('servi√ßo') || msg.includes('servico')) fieldToEdit = 'services';
    else if (msg.includes('pagamento')) fieldToEdit = 'paymentMethods';
    
    if (fieldToEdit) {
      const field = CONFIG_FIELDS.find(f => f.step === fieldToEdit);
      if (field) {
        const fieldMessage: Message = {
          id: Date.now().toString(),
          content: `**${field.question}**`,
          sender: 'assistant',
          timestamp: new Date(),
          type: 'field',
          fieldData: {
            fieldName: field.step,
            fieldLabel: field.title,
            fieldType: field.fieldType,
            placeholder: field.placeholder,
            currentValue: agentData[field.step as keyof AgentData] as string || '',
            options: field.options
          }
        };
        
        setMessages(prev => [...prev, fieldMessage]);
        return;
      }
    }
    
    // Se n√£o detectou campo espec√≠fico, usar IA
    await handleGeneralChat(message);
  };

  const extractBusinessNameFromMessage = (message: string): string | null => {
    const patterns = [
      /(?:meu|minha|nosso|nossa|o|a)\s+([a-zA-Z√†-√ø\s]+?)\s+(?:se chama|chama|√©|chamado|chamada)/i,
      /(?:nome|chama|chamado|chamada)\s+([a-zA-Z√†-√ø\s]+)/i,
      /([a-zA-Z√†-√ø\s]+?)\s+(?:restaurante|pizzaria|lanchonete|cl√≠nica|consult√≥rio|loja)/i
    ];
    
    for (const pattern of patterns) {
      const match = message.match(pattern);
      if (match) {
        let name = match[2] || match[1];
        if (name) {
          name = name.trim();
          name = name.replace(/^(do|da|de|dos|das|o|a|um|uma)\s+/i, '');
          name = name.replace(/\s+(restaurante|pizzaria|lanchonete|cl√≠nica|consult√≥rio|loja)$/i, '');
          
          if (name.length > 2 && name.length < 50) {
            return name.split(' ').map(word => 
              word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
            ).join(' ');
          }
        }
      }
    }
    
    return null;
  };

  const detectBusinessType = (message: string): string | null => {
    const msg = message.toLowerCase();
    
    const businessKeywords = {
      'restaurante': ['restaurante', 'pizza', 'pizzaria', 'comida', 'lanche', 'lanchonete', 'delivery', 'ifood', 'bar', 'caf√©', 'confeitaria'],
      'clinica': ['m√©dico', 'm√©dica', 'cl√≠nica', 'consult√≥rio', 'sa√∫de', 'consulta', 'dentista', 'psic√≥logo', 'advogado', 'advocacia', 'escrit√≥rio', 'jur√≠dico', 'direito', 'fisioterapeuta', 'nutricionista'],
      'loja': ['loja', 'venda', 'produtos', 'com√©rcio', 'mercado', 'varejo', 'butique', 'shopping'],
      'salao': ['sal√£o', 'cabelo', 'beleza', 'est√©tica', 'manicure', 'barbearia', 'cabeleireiro', 'spa'],
      'oficina': ['oficina', 'mec√¢nica', 'carro', 'conserto', 'manuten√ß√£o', 'el√©trica', 'hidr√°ulica', 't√©cnico'],
      'hotel': ['hotel', 'pousada', 'hospedagem', 'reserva', 'turismo', 'hostel'],
      'academia': ['academia', 'gin√°stica', 'muscula√ß√£o', 'fitness', 'treino', 'pilates', 'crossfit', 'personal'],
      'petshop': ['pet shop', 'petshop', 'veterin√°rio', 'pet', 'animal', 'c√£o', 'gato', 'veterin√°ria'],
      'farmacia': ['farm√°cia', 'medicamento', 'rem√©dio', 'drogaria', 'manipula√ß√£o'],
      'escola': ['escola', 'educa√ß√£o', 'ensino', 'col√©gio', 'curso', 'professor', 'aula', 'refor√ßo']
    };
    
    for (const [type, keywords] of Object.entries(businessKeywords)) {
      if (keywords.some(keyword => msg.includes(keyword))) {
        return type;
      }
    }
    
    return null;
  };

  // FUN√á√ÉO PARA CRIAR BOT√ïES PERSUASIVOS BASEADOS NO CONTEXTO
  const createPersuasiveButtons = (intent: string, businessType?: string): Message | null => {
    let buttonOptions: Array<{value: string, label: string}> = [];
    let content = "";

    switch (intent) {
      case 'greeting':
        content = "**üöÄ O que voc√™ gostaria de fazer agora?**";
        buttonOptions = [
          { value: 'tell_profession', label: 'üë©‚Äçüíº Contar minha profiss√£o' },
          { value: 'see_prices', label: 'üí∞ Ver pre√ßos' },
          { value: 'test_now', label: 'üß™ Testar gr√°tis' },
          { value: 'how_works', label: '‚ùì Como funciona' }
        ];
        break;

      case 'configure':
        content = "**‚ú® Pronto para transformar seu atendimento?**";
        buttonOptions = [
          { value: `auto_${businessType}`, label: 'üöÄ Configurar agora!' },
          { value: 'show_details', label: 'üìã Ver o que ser√° configurado' },
          { value: 'test_first', label: 'üß™ Testar antes' }
        ];
        break;

      case 'support':
        content = "**üéØ Como posso te ajudar melhor?**";
        buttonOptions = [
          { value: 'start_now', label: 'üöÄ Quero come√ßar agora' },
          { value: 'test_first', label: 'üß™ Fazer teste gr√°tis' },
          { value: 'talk_human', label: 'üë®‚Äçüíº Falar com consultor' },
          { value: 'more_info', label: 'üìö Mais informa√ß√µes' }
        ];
        break;

      case 'unclear':
        content = "**üí° Talvez eu possa te ajudar com uma dessas op√ß√µes:**";
        buttonOptions = [
          { value: 'tell_profession', label: 'üë©‚Äçüíº Falar sobre meu neg√≥cio' },
          { value: 'see_prices', label: 'üí∞ Ver pre√ßos e planos' },
          { value: 'test_now', label: 'üß™ Fazer um teste' },
          { value: 'how_works', label: '‚ùì Entender como funciona' }
        ];
        break;

      default:
        // Para outros intents, mostrar a√ß√µes gerais
        content = "**üåü Que tal dar o pr√≥ximo passo?**";
        buttonOptions = [
          { value: 'config_business', label: '‚öôÔ∏è Configurar meu neg√≥cio' },
          { value: 'test_system', label: 'üß™ Testar sistema' },
          { value: 'see_prices', label: 'üí∞ Ver investimento' }
        ];
    }

    if (buttonOptions.length === 0) return null;

    return {
      id: generateUniqueId(),
      content,
      sender: 'assistant',
      timestamp: new Date(),
      type: 'field',
      fieldData: {
        fieldName: 'persuasiveAction',
        fieldLabel: 'Pr√≥xima A√ß√£o',
        fieldType: 'buttons',
        options: buttonOptions
      }
    };
  };

  const checkLearnedPatterns = (message: string) => {
    try {
      const patterns = JSON.parse(localStorage.getItem('ai_patterns') || '[]');
      const normalizedMessage = message.toLowerCase().trim();
      
      // Buscar padr√£o exato ou similar
      const matchedPattern = patterns.find((pattern: any) => {
        const similarity = calculateSimilarity(normalizedMessage, pattern.input);
        return similarity > 0.8; // 80% de similaridade
      });
      
      if (matchedPattern && matchedPattern.confidence > 0.8) {
        console.log('üéØ Padr√£o encontrado:', matchedPattern);
        return matchedPattern;
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå Erro ao verificar padr√µes:', error);
      return null;
    }
  };

  const calculateSimilarity = (str1: string, str2: string): number => {
    const words1 = str1.split(' ');
    const words2 = str2.split(' ');
    
    let matches = 0;
    words1.forEach(word => {
      if (words2.includes(word)) matches++;
    });
    
    return matches / Math.max(words1.length, words2.length);
  };

  const handleIntelligentAnalysis = async (message: string) => {
    // 1. PRIMEIRO, VERIFICAR SE √â UM COMANDO DE CONFIGURA√á√ÉO (mencionou profiss√£o)
    const businessType = detectBusinessType(message);
    if (businessType && (message.toLowerCase().includes('sou ') || message.toLowerCase().includes('tenho um') || message.toLowerCase().includes('minha √°rea √©'))) {
      await startStepByStepConfig(businessType, extractBusinessNameFromMessage(message));
      return;
          }

    // 2. SE N√ÉO FOR CONFIGURA√á√ÉO, USAR A IA PARA RESPOSTAS INTELIGENTES E PERSUASIVAS
    await handleGeneralChat(message);
  };

  const [configSteps, setConfigSteps] = useState<string[]>([]);
  const [currentConfigStep, setCurrentConfigStep] = useState(0);

  const startStepByStepConfig = async (businessType: string, businessName?: string, fullConfig?: any) => {
    // Configura√ß√£o passo a passo edit√°vel
    const businessTypeNames = {
      'clinica': 'Cl√≠nica/Consult√≥rio',
      'restaurante': 'Restaurante/Alimenta√ß√£o',
      'salao': 'Sal√£o de Beleza',
      'oficina': 'Oficina/Servi√ßos T√©cnicos',
      'loja': 'Loja/Com√©rcio',
      'academia': 'Academia/Fitness',
      'petshop': 'Pet Shop',
      'farmacia': 'Farm√°cia',
      'escola': 'Escola/Educa√ß√£o'
    };

    const typeName = businessTypeNames[businessType as keyof typeof businessTypeNames] || businessType;
    
    // Definir sequ√™ncia de campos a configurar
    const steps = ['businessName', 'contactPhone', 'location', 'workingHours', 'services', 'paymentMethods', 'hasDelivery', 'acceptsReservations'];
    console.log(`üöÄ Definindo configSteps:`, steps);
    setConfigSteps(steps);
    setCurrentConfigStep(0);
    
    // Aplicar valores padr√£o do tipo de neg√≥cio
    const defaultData = {
      businessType: businessType,
      businessName: businessName || `${typeName} Exemplo`,
      contactPhone: '(11) 99999-9999',
      location: 'S√£o Paulo, SP',
      workingHours: getDefaultHours(businessType),
      services: getDefaultServices(businessType),
      paymentMethods: getDefaultPayments(businessType),
      hasDelivery: getDefaultDelivery(businessType),
      acceptsReservations: getDefaultReservations(businessType)
    };
    
    onAgentUpdate(defaultData);
    
    const startMessage: Message = {
      id: Date.now().toString(),
      content: `**‚ú® Perfeito! Vou configurar seu ${typeName} passo a passo.**

Preencherei com dados padr√£o, mas voc√™ pode editar tudo! üòä

**üìù Vamos come√ßar:**`,
      sender: 'assistant',
      timestamp: new Date()
    };
    setMessages(prev => [...prev, startMessage]);

    // Mostrar primeiro campo - usar steps diretamente para evitar race condition
    setTimeout(() => {
      showConfigStepDirect(0, defaultData, steps);
    }, 1500);
  };

  const showConfigStepDirect = (stepIndex: number, defaultData: any, steps: string[]) => {
    console.log(`üîß showConfigStepDirect: stepIndex=${stepIndex}, steps.length=${steps.length}`);
    
    if (stepIndex >= steps.length) {
      console.log(`‚úÖ Configura√ß√£o conclu√≠da - chamando completeStepByStepConfig`);
      completeStepByStepConfig();
      return;
    }

    const fieldName = steps[stepIndex];
    console.log(`üìù Mostrando campo: ${fieldName}`);
    
    const fieldLabels = {
      businessName: 'Nome do Neg√≥cio',
      contactPhone: 'Telefone/WhatsApp',
      location: 'Localiza√ß√£o',
      workingHours: 'Hor√°rios de Funcionamento',
      services: 'Principais Servi√ßos',
      paymentMethods: 'Formas de Pagamento',
      hasDelivery: 'Entrega',
      acceptsReservations: 'Agendamento'
    };

    const currentValue = defaultData[fieldName] || '';
    console.log(`üíæ Valor atual para ${fieldName}: ${currentValue}`);
    
    // Determinar tipo de campo baseado no nome do campo
    let fieldType = 'input';
    let options = undefined;
    
    if (fieldName === 'services' || fieldName === 'paymentMethods' || fieldName === 'workingHours') {
      fieldType = 'textarea';
    } else if (fieldName === 'hasDelivery' || fieldName === 'acceptsReservations') {
      fieldType = 'buttons';
      options = [
        { value: 'true', label: '‚úÖ Sim' },
        { value: 'false', label: '‚ùå N√£o' }
      ];
    }
    
    const fieldMessage: Message = {
      id: generateUniqueId(),
      content: `**${fieldLabels[fieldName as keyof typeof fieldLabels]}:**`,
      sender: 'assistant',
      timestamp: new Date(),
      type: 'field',
      fieldData: {
        fieldName: fieldName,
        fieldLabel: fieldLabels[fieldName as keyof typeof fieldLabels],
        fieldType: fieldType,
        placeholder: String(currentValue),
        defaultValue: String(currentValue),
        configStep: stepIndex,
        isStepByStepConfig: true,
        options: options
      }
    };
    setMessages(prev => [...prev, fieldMessage]);
  };

  const showConfigStep = (stepIndex: number, defaultData: any) => {
    console.log(`üîß showConfigStep: stepIndex=${stepIndex}, configSteps.length=${configSteps.length}`);
    
    if (stepIndex >= configSteps.length) {
      console.log(`‚úÖ Configura√ß√£o conclu√≠da - chamando completeStepByStepConfig`);
      completeStepByStepConfig();
      return;
    }

    const fieldName = configSteps[stepIndex];
    console.log(`üìù Mostrando campo: ${fieldName}`);
    
    const fieldLabels = {
      businessName: 'Nome do Neg√≥cio',
      contactPhone: 'Telefone/WhatsApp',
      location: 'Localiza√ß√£o',
      workingHours: 'Hor√°rios de Funcionamento',
      services: 'Principais Servi√ßos',
      paymentMethods: 'Formas de Pagamento',
      hasDelivery: 'Entrega',
      acceptsReservations: 'Agendamento'
    };

    const currentValue = defaultData[fieldName] || '';
    console.log(`üíæ Valor atual para ${fieldName}: ${currentValue}`);
    
    // Determinar tipo de campo baseado no nome do campo
    let fieldType = 'input';
    let options = undefined;
    
    if (fieldName === 'services' || fieldName === 'paymentMethods' || fieldName === 'workingHours') {
      fieldType = 'textarea';
    } else if (fieldName === 'hasDelivery' || fieldName === 'acceptsReservations') {
      fieldType = 'buttons';
      options = [
        { value: 'true', label: '‚úÖ Sim' },
        { value: 'false', label: '‚ùå N√£o' }
      ];
    }
    
    const fieldMessage: Message = {
      id: generateUniqueId(),
      content: `**${fieldLabels[fieldName as keyof typeof fieldLabels]}:**`,
      sender: 'assistant',
      timestamp: new Date(),
      type: 'field',
      fieldData: {
        fieldName: fieldName,
        fieldLabel: fieldLabels[fieldName as keyof typeof fieldLabels],
        fieldType: fieldType,
        placeholder: String(currentValue),
        defaultValue: String(currentValue),
        configStep: stepIndex,
        isStepByStepConfig: true,
        options: options
      }
    };
    setMessages(prev => [...prev, fieldMessage]);
  };

  const completeStepByStepConfig = () => {
    // Salvar dados na sess√£o
    try {
      sessionStorage.setItem('functionarioIA_data', JSON.stringify(agentData));
    } catch (e) {
      console.error('Erro ao salvar dados na sess√£o:', e);
    }

    // Primeiro mostrar mensagem de conclus√£o
    const completionMessage: Message = {
      id: Date.now().toString(),
      content: `Configura√ß√£o conclu√≠da com sucesso!\n\nSeu funcion√°rio virtual est√° pronto! Voc√™ tamb√©m pode:\n\n‚Ä¢ Conectar ao WhatsApp para usar em produ√ß√£o\n‚Ä¢ Editar qualquer informa√ß√£o se necess√°rio\n\nO que gostaria de fazer?`,
      sender: 'assistant',
      timestamp: new Date(),
      type: 'field',
      fieldData: {
        fieldName: 'afterConfig',
        fieldLabel: 'Pr√≥xima A√ß√£o',
        fieldType: 'buttons',
        options: [
          { value: 'test_now', label: 'Testar no simulador' },
          { value: 'connect_whatsapp', label: 'Conectar WhatsApp' },
          { value: 'edit_config', label: 'Editar algo' }
        ]
      }
    };
    setMessages(prev => [...prev, completionMessage]);

    // Ap√≥s 3 segundos, mostrar automaticamente o simulador de WhatsApp
    setTimeout(() => {
      const whatsappMessage: Message = {
        id: generateUniqueId(),
        content: 'Teste seu funcion√°rio virtual:',
        sender: 'assistant',
        timestamp: new Date(),
        type: 'whatsapp'
      };
      setMessages(prev => [...prev, whatsappMessage]);
    }, 3000);
  };

  const applyIntelligentConfig = async (businessType: string, businessName?: string, fullConfig?: any) => {
    setIsLoading(true);
    setConfigData({ ...configData, isConfiguring: true });
    setShowTemplates(false);

    const configs = {
      clinica: {
        businessType: 'clinica',
        businessName: businessName || 'Minha Cl√≠nica',
        contactPhone: '(11) 99999-9999',
        location: 'Rua das Flores, 123 - Centro, S√£o Paulo - SP',
        workingHours: 'Segunda a Sexta: 08:00 √†s 18:00\nS√°bado: 08:00 √†s 12:00',
        services: 'Consultas de Psicologia\nTerapias e Avalia√ß√µes\nAcompanhamento especializado',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Conv√™nios M√©dicos, Dinheiro',
        hasDelivery: false,
        acceptsReservations: true,
        personality: 'profissional e acolhedor',
        welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Gostaria de agendar uma consulta?'
      },
      restaurante: {
        businessType: 'restaurante',
        businessName: businessName || 'Meu Restaurante',
        contactPhone: '(11) 99999-9999',
        location: 'Rua dos Sabores, 456 - Centro, S√£o Paulo - SP',
        workingHours: 'Todos os dias: 11:00 √†s 23:00\nDomingo: 11:00 √†s 22:00',
        services: 'Pizzas tradicionais e especiais\nPratos executivos a partir de R$ 25\nLanches e bebidas geladas',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Dinheiro, Vale Refei√ß√£o',
        hasDelivery: true,
        acceptsReservations: false,
        personality: 'atencioso e prestativo',
        welcomeMessage: 'Ol√°! Bem-vindo(a) ao {businessName}! Vamos fazer seu pedido?'
      },
      salao: {
        businessType: 'salao',
        businessName: businessName || 'Meu Sal√£o de Beleza',
        contactPhone: '(11) 99999-9999',
        location: 'Avenida da Beleza, 789 - Centro, S√£o Paulo - SP',
        workingHours: 'Ter√ßa a S√°bado: 09:00 √†s 19:00\nDomingo: 09:00 √†s 17:00',
        services: 'Cortes femininos e masculinos\nColora√ß√£o e mechas\nManicure e Pedicure\nTratamentos capilares',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Dinheiro',
        hasDelivery: false,
        acceptsReservations: true,
        personality: 'carinhoso e atencioso',
        welcomeMessage: 'Ol√°! Bem-vindo(a) ao {businessName}! Vamos cuidar da sua beleza?'
      },
      oficina: {
        businessType: 'oficina',
        businessName: businessName || 'Minha Oficina',
        contactPhone: '(11) 99999-9999',
        location: 'Rua dos Mec√¢nicos, 321 - Industrial, S√£o Paulo - SP',
        workingHours: 'Segunda a Sexta: 08:00 √†s 18:00\nS√°bado: 08:00 √†s 12:00',
        services: 'Manuten√ß√£o preventiva e corretiva\nTroca de √≥leo e filtros\nAlinhamento e balanceamento\nServi√ßos el√©tricos automotivos',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Dinheiro',
        hasDelivery: false,
        acceptsReservations: true,
        personality: 'profissional e confi√°vel',
        welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Como posso ajudar com seu ve√≠culo?'
      },
      loja: {
        businessType: 'loja',
        businessName: businessName || 'Minha Loja',
        contactPhone: '(11) 99999-9999',
        location: 'Rua do Com√©rcio, 654 - Centro, S√£o Paulo - SP',
        workingHours: 'Segunda a Sexta: 09:00 √†s 18:00\nS√°bado: 09:00 √†s 14:00',
        services: 'Produtos variados com qualidade\nAtendimento personalizado\nEntrega r√°pida na regi√£o',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Dinheiro',
        hasDelivery: true,
        acceptsReservations: false,
        personality: 'amig√°vel e informativo',
        welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Como posso ajud√°-lo(a)?'
      },
      academia: {
        businessType: 'academia',
        businessName: businessName || 'Minha Academia',
        contactPhone: '(11) 99999-9999',
        location: 'Avenida Fitness, 123 - Centro, S√£o Paulo - SP',
        workingHours: 'Segunda a Sexta: 06:00 √†s 22:00\nS√°bado: 08:00 √†s 18:00\nDomingo: 08:00 √†s 16:00',
        services: 'Muscula√ß√£o e equipamentos modernos\nAulas coletivas (Zumba, Pilates, CrossFit)\nAvalia√ß√£o f√≠sica personalizada\nAcompanhamento nutricional',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Dinheiro, D√©bito em conta',
        hasDelivery: false,
        acceptsReservations: true,
        personality: 'motivador e energ√©tico',
        welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Vamos treinar?'
      },
      petshop: {
        businessType: 'petshop',
        businessName: businessName || 'Meu Pet Shop',
        contactPhone: '(11) 99999-9999',
        location: 'Rua dos Animais, 456 - Centro, S√£o Paulo - SP',
        workingHours: 'Segunda a S√°bado: 08:00 √†s 18:00\nDomingo: 09:00 √†s 15:00',
        services: 'Ra√ß√£o e petiscos para c√£es e gatos\nBrinquedos e acess√≥rios\nBanho e tosa\nConsultas veterin√°rias',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Dinheiro',
        hasDelivery: true,
        acceptsReservations: true,
        personality: 'carinhoso e atencioso',
        welcomeMessage: 'Ol√°! Bem-vindo(a) ao {businessName}! Como posso cuidar do seu pet?'
      },
      farmacia: {
        businessType: 'farmacia',
        businessName: businessName || 'Minha Farm√°cia',
        contactPhone: '(11) 99999-9999',
        location: 'Avenida da Sa√∫de, 789 - Centro, S√£o Paulo - SP',
        workingHours: 'Segunda a Domingo: 07:00 √†s 22:00',
        services: 'Medicamentos com e sem receita\nProdutos de higiene e beleza\nSuplementos e vitaminas\nMedicamentos manipulados',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Dinheiro, Conv√™nios',
        hasDelivery: true,
        acceptsReservations: false,
        personality: 'profissional e cuidadoso',
        welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Precisa de algum medicamento?'
      },
      escola: {
        businessType: 'escola',
        businessName: businessName || 'Minha Escola',
        contactPhone: '(11) 99999-9999',
        location: 'Rua da Educa√ß√£o, 321 - Centro, S√£o Paulo - SP',
        workingHours: 'Segunda a Sexta: 07:00 √†s 18:00',
        services: 'Ensino Fundamental e M√©dio\nRefor√ßo escolar personalizado\nAtividades extracurriculares\nAcompanhamento psicopedag√≥gico',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Boleto, D√©bito em conta',
        hasDelivery: false,
        acceptsReservations: true,
        personality: 'educativo e acolhedor',
        welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Como posso ajudar?'
      },
      outro: {
        businessType: 'outro',
        businessName: businessName || 'Meu Neg√≥cio',
        contactPhone: '(11) 99999-9999',
        location: 'Rua Principal, 123 - Centro, S√£o Paulo - SP',
        workingHours: 'Segunda a Sexta: 08:00 √†s 18:00\nS√°bado: 08:00 √†s 12:00',
        services: 'Produtos e servi√ßos de qualidade\nAtendimento personalizado\nSolu√ß√µes sob medida',
        paymentMethods: 'PIX, Cart√£o de Cr√©dito/D√©bito, Dinheiro',
        hasDelivery: false,
        acceptsReservations: false,
        personality: 'profissional e atencioso',
        welcomeMessage: 'Ol√°! Bem-vindo(a) √† {businessName}! Como posso ajud√°-lo(a)?'
      }
    };

    // Usar configura√ß√£o da IA se dispon√≠vel, sen√£o usar padr√£o
    const config = fullConfig || configs[businessType as keyof typeof configs];
    
    if (config) {
      const configMessage: Message = {
        id: Date.now().toString(),
        content: `‚úÖ **CONFIGURA√á√ÉO COMPLETA APLICADA!**

**üè¢ Nome:** ${config.businessName}
**üì± WhatsApp:** ${config.contactPhone}
**üìç Endere√ßo:** ${config.location}
**‚è∞ Hor√°rios:** ${config.workingHours.split('\n')[0]}...
**üõç Servi√ßos:** ${config.services.split('\n')[0]}...
**üí≥ Pagamento:** ${config.paymentMethods}
**üöö Entrega:** ${config.hasDelivery ? '‚úÖ Sim' : '‚ùå N√£o'}
**üìÖ Agendamento:** ${config.acceptsReservations ? '‚úÖ Sim' : '‚ùå N√£o'}

**üéâ Tudo foi preenchido automaticamente! Voc√™ pode editar qualquer campo posteriormente.**`,
        sender: 'assistant',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, configMessage]);

      // Aplicar TODA a configura√ß√£o automaticamente
      onAgentUpdate({
        businessType: config.businessType,
        businessName: config.businessName,
        contactPhone: config.contactPhone,
        location: config.location,
        workingHours: config.workingHours,
        services: config.services,
        paymentMethods: config.paymentMethods,
        hasDelivery: config.hasDelivery,
        acceptsReservations: config.acceptsReservations,
        personality: config.personality,
        welcomeMessage: config.welcomeMessage.replace('{businessName}', config.businessName),
        businessInfo: `${config.businessName} - ${businessType} com atendimento de qualidade`,
        template: businessType
      });

      // Salvar dados na sess√£o
      try {
        sessionStorage.setItem('functionarioIA_data', JSON.stringify({
          ...config,
          businessInfo: `${config.businessName} - ${businessType} com atendimento de qualidade`,
          template: businessType,
          welcomeMessage: config.welcomeMessage.replace('{businessName}', config.businessName)
        }));
      } catch (e) {
        console.error('Erro ao salvar dados na sess√£o:', e);
      }

      // Finalizar configura√ß√£o automaticamente
      setConfigData({ ...configData, isConfiguring: false });
      setCurrentStep(0);

      // Mostrar mensagem de conclus√£o primeiro
      setTimeout(() => {
        const completionMessage: Message = {
          id: generateUniqueId(),
          content: `**üöÄ Tudo pronto! O que voc√™ quer fazer agora?**`,
          sender: 'assistant',
          timestamp: new Date(),
          type: 'field',
          fieldData: {
            fieldName: 'afterFullConfig',
            fieldLabel: 'Pr√≥xima A√ß√£o',
            fieldType: 'buttons',
            options: [
              { value: 'test_whatsapp', label: 'üß™ Testar no WhatsApp' },
              { value: 'edit_info', label: '‚úèÔ∏è Editar informa√ß√µes' },
              { value: 'connect_now', label: 'üì± Conectar WhatsApp' },
              { value: 'see_preview', label: 'üëÄ Ver resumo' }
            ]
          }
        };
        setMessages(prev => [...prev, completionMessage]);
      }, 1500);

      // Mostrar simulador de WhatsApp automaticamente em uma nova linha
      setTimeout(() => {
        const whatsappSimulator: Message = {
          id: generateUniqueId(),
          content: 'üì± **Seu funcion√°rio virtual est√° pronto! Teste agora como ele vai atender seus clientes:**',
          sender: 'assistant',
          timestamp: new Date(),
          type: 'whatsapp'
        };
        setMessages(prev => [...prev, whatsappSimulator]);
      }, 3000);

    } else {
      const errorMessage: Message = {
        id: Date.now().toString(),
        content: '‚ùå Tipo de neg√≥cio n√£o reconhecido. Escolha um template abaixo:',
        sender: 'assistant',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, errorMessage]);
      setShowTemplates(true);
      setConfigData({ ...configData, isConfiguring: false });
    }

    setIsLoading(false);
  };

  const handleGeneralChat = async (message: string) => {
    // Verificar se pode responder com conversas salvas
    const conversationHistory = JSON.parse(localStorage.getItem('conversation_history') || '[]');
    const similarConversation = conversationHistory.find((conv: any) => 
      calculateSimilarity(message.toLowerCase(), conv.input.toLowerCase()) > 0.8
    );

    if (similarConversation) {
      const savedMessage: Message = {
        id: Date.now().toString(),
        content: similarConversation.response,
        sender: 'assistant',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, savedMessage]);
      return;
    }

    // Verificar se j√° est√° configurado para personalizar resposta
    const isConfigured = agentData.businessName && agentData.businessName !== '' && agentData.businessType && agentData.businessType !== '';
    const businessInfo = isConfigured ? `
    
NEG√ìCIO J√Å CONFIGURADO:
- Nome: ${agentData.businessName}
- Tipo: ${agentData.businessType}
- WhatsApp: ${agentData.contactPhone || 'n√£o informado'}
- Entrega: ${agentData.hasDelivery ? 'Sim' : 'N√£o'}
- Agendamento: ${agentData.acceptsReservations ? 'Sim' : 'N√£o'}
- Servi√ßos: ${agentData.services || 'n√£o especificado'}
- Hor√°rios: ${agentData.workingHours || 'n√£o especificado'}
- Pagamentos: ${agentData.paymentMethods || 'n√£o especificado'}

O usu√°rio J√Å TEM TUDO CONFIGURADO! Seja mais direto e persuasivo para conectar ao WhatsApp ou assinar.` : '';

          const systemPrompt = `Voc√™ √© Maria, assistente virtual do FuncionarioPro. Responda de forma HUMANA, EMP√ÅTICA e EXTREMAMENTE PERSUASIVA.

${businessInfo}

INFORMA√á√ïES SOBRE O FUNCION√ÅRIOAI:

PRODUTO:
- Sistema que cria funcion√°rios virtuais para WhatsApp
- Atendimento autom√°tico 24h para qualquer tipo de neg√≥cio
- Configura automaticamente baseado na profiss√£o do usu√°rio

PLANOS E PRE√áOS:
- TESTE GR√ÅTIS: 7 dias, R$ 0,00
- PROFISSIONAL: R$ 49,90/m√™s (at√© 3 funcion√°rios virtuais)
- EMPRESARIAL: R$ 149,90/m√™s (funcion√°rios ilimitados)

BENEF√çCIOS COMPROVADOS:
- Aumento m√©dio de 300% nas vendas
- Redu√ß√£o de 80% no tempo de atendimento  
- Disponibilidade 24h todos os dias
- Nunca mais perder clientes

COMO FUNCIONA:
1. Configura√ß√£o simples (2 minutos) ${isConfigured ? '- J√Å FEITA!' : ''}
2. Conex√£o oficial com WhatsApp Web Diretona nossa Plataforma
3. Atendimento autom√°tico imediato
4. Agendamentos e pedidos automatizados

INSTRU√á√ïES ESPECIAIS:
- Se o usu√°rio mencionar "quero assinar", "interessado", "vale a pena" seja EXTREMAMENTE persuasivo
- Use dados concretos: "300% mais vendas", "R$ 49,90 vs R$ 1.500 de funcion√°rio"
- Cite casos de sucesso: "Semana passada uma cliente dobrou o movimento"
- Se J√Å EST√Å CONFIGURADO: seja direto para conex√£o/assinatura
- NUNCA pe√ßa para configurar novamente se j√° est√° configurado
- Responda sempre como uma pessoa real, nunca como rob√¥
- Use linguagem natural e conversacional

PERSONALIDADE:
- Seja MARIA, uma consultora experiente e entusiasmada
- Fale como uma pessoa real, com experi√™ncia em neg√≥cios
- Use linguagem calorosa, mas profissional
- Seja curiosa sobre o neg√≥cio da pessoa (se n√£o configurado)
- Use emojis sutilmente para humanizar
- Seja PERSUASIVA sem ser chata

SEMPRE:
- Responda como uma pessoa experiente falaria
- Use refer√™ncias espec√≠ficas quando poss√≠vel
- Fa√ßa perguntas para entender melhor (se necess√°rio)
- Ofere√ßa solu√ß√µes pr√°ticas
- Nunca d√™ respostas vagas ou gen√©ricas
- Se n√£o souber, pe√ßa mais detalhes
- FOQUE na VENDA e BENEF√çCIOS quando detectar interesse
- NUNCA use respostas autom√°ticas ou padronizadas`;

    try {
      setIsLoading(true);
      
      const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${MISTRAL_CONFIG.API_KEY}`
        },
        body: JSON.stringify({
          model: MISTRAL_CONFIG.CURRENT.model,
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: message }
          ],
          max_tokens: 500,
          temperature: 0.7
        })
      });

      if (response.ok) {
        const data = await response.json();
        const aiResponse = data.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar sua pergunta no momento.';
        
        const assistantMessage: Message = {
          id: generateUniqueId(),
          content: aiResponse,
          sender: 'assistant',
          timestamp: new Date(),
          type: 'text'
        };

        setMessages(prev => [...prev, assistantMessage]);

        // Salvar conversa para aprendizado
        const conversationHistory = JSON.parse(localStorage.getItem('conversation_history') || '[]');
        conversationHistory.push({
          input: message,
          response: aiResponse,
          intent: 'general',
          timestamp: new Date().toISOString()
        });
        localStorage.setItem('conversation_history', JSON.stringify(conversationHistory.slice(-200)));
      } else {
        throw new Error(`API Error: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå Erro na IA:', error);
      
      const errorMessage: Message = {
        id: Date.now().toString(),
        content: "Olha, vou ser bem direta com voc√™: mesmo com esse probleminha t√©cnico, posso te garantir que o FuncionarioPro √© incr√≠vel!\n\nüöÄ **Benef√≠cios comprovados:**\n- 300% mais vendas em m√©dia\n- Atendimento 24h sem parar\n- R$ 49,90/m√™s vs R$ 1.500 de funcion√°rio\n\n" + (isConfigured ? "Seu neg√≥cio j√° est√° configurado! Quer testar ou conectar direto ao WhatsApp?" : "Quer que eu configure para seu neg√≥cio? Me conta sua profiss√£o!"),
        sender: 'assistant',
        timestamp: new Date(),
        type: 'text'
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const applyTemplate = (templateKey: string) => {
    const template = TEMPLATES[templateKey];
    if (!template) return;
    
    // Reset completo do estado
    setConfigData({ ...configData, isShowingField: false });
    setCurrentStep(0);
    setConfigData({ ...configData, isConfiguring: false }); // N√£o usar configura√ß√£o autom√°tica
    setShowTemplates(false);
    
    // Usar configura√ß√£o passo a passo baseada no tipo de neg√≥cio
    const businessType = template.businessType;
    
    const welcomeMessage: Message = {
      id: Date.now().toString(),
      content: `‚úÖ **${template.title}** selecionado!

Agora vou configurar passo a passo para voc√™ poder editar tudo! üòä`,
      sender: 'assistant',
      timestamp: new Date()
    };
    
    setMessages([welcomeMessage]);
    
    // Iniciar configura√ß√£o passo a passo
    setTimeout(() => {
      startStepByStepConfig(businessType);
    }, 1000);
  };

  const showCurrentStepField = () => {
    console.log(`üîÑ showCurrentStepField called - Step: ${currentStep}, isShowingField: ${configData.isShowingField}`);
    
    // Evitar chamadas duplicadas
    if (configData.isShowingField) {
      console.log('‚ùå Ignorando chamada duplicada de showCurrentStepField');
      return;
    }
    
    if (currentStep >= CONFIG_FIELDS.length) {
      console.log('‚úÖ Configura√ß√£o completa');
      completeConfiguration();
      return;
    }
    
    setConfigData({ ...configData, isShowingField: true });
    console.log('üîí isShowingField = true');
    
    const field = CONFIG_FIELDS[currentStep];
    const currentValue = agentData[field.step as keyof AgentData] as string;
    
    console.log(`üìù Step ${currentStep}: ${field.step} = "${currentValue}"`);
    
    // Pular campos j√° preenchidos e v√°lidos
    if (currentValue && 
        currentValue !== 'A ser definido' && 
        currentValue !== '' && 
        currentValue.trim() !== '') {
      console.log(`‚è≠Ô∏è Pulando campo ${field.step} (j√° preenchido)`);
      setConfigData({ ...configData, isShowingField: false });
      setCurrentStep(prev => prev + 1);
      setTimeout(() => setConfigData({ ...configData, isShowingField: true }), 50);
      return;
    }
    
    console.log('üéØ Criando campo:', field.step);
    
    // Remover qualquer campo existente antes de criar um novo
    setMessages(prev => prev.filter(msg => msg.type !== 'field'));
    
    const fieldMessage: Message = {
      id: Date.now().toString(),
      content: `**${currentStep + 1}. ${field.question}**`,
      sender: 'assistant',
      timestamp: new Date(),
      type: 'field',
      fieldData: {
        fieldName: field.step,
        fieldLabel: field.title,
        fieldType: field.fieldType,
        placeholder: field.placeholder,
        currentValue: currentValue || '',
        options: field.options
      }
    };
    
    setTimeout(() => {
      setMessages(prev => [...prev, fieldMessage]);
      setConfigData({ ...configData, isShowingField: false });
      console.log('üîì isShowingField = false');
    }, 50);
  };

  const handleFieldResponse = (value: string) => {
    console.log(`üéØ handleFieldResponse called with: "${value}"`);
    console.log(`üîç Debug - configSteps.length: ${configSteps.length}, currentConfigStep: ${currentConfigStep}`);
    
    // PRIMEIRO: Verificar se este campo √© de configura√ß√£o passo a passo
    // Buscar na mensagem mais recente se tem a flag isStepByStepConfig
    const lastMessage = messages[messages.length - 1];
    const isStepByStepField = lastMessage?.fieldData?.isStepByStepConfig;
    
    console.log(`üéØ √â campo passo a passo? ${isStepByStepField}`);
    
    // Se √© um campo da configura√ß√£o passo a passo
    if (isStepByStepField && configSteps.length > 0 && currentConfigStep < configSteps.length) {
      const fieldName = configSteps[currentConfigStep];
      console.log(`üìù Processando campo: ${fieldName} = ${value}`);
      
      // Atualizar dados do agente
      const updateData = {
        [fieldName]: value
      };
      onAgentUpdate(updateData);
      
      // Confirma√ß√£o visual
      const confirmMessage: Message = {
        id: Date.now().toString(),
        content: `‚úÖ **${fieldName === 'businessName' ? 'Nome' : 
                       fieldName === 'contactPhone' ? 'Telefone' :
                       fieldName === 'location' ? 'Localiza√ß√£o' :
                       fieldName === 'workingHours' ? 'Hor√°rios' :
                       fieldName === 'services' ? 'Servi√ßos' :
                       fieldName === 'paymentMethods' ? 'Pagamentos' : 'Campo'} atualizado!**

${value}`,
        sender: 'assistant',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, confirmMessage]);
      
      // Avan√ßar para pr√≥ximo campo
      const nextStep = currentConfigStep + 1;
      setCurrentConfigStep(nextStep);
      
      setTimeout(() => {
        if (nextStep < configSteps.length) {
          setConfigData({ ...configData, isShowingField: true });
          // Pr√≥ximo campo - usar valores atualizados
          const defaultData = {
            businessName: fieldName === 'businessName' ? value : agentData.businessName,
            contactPhone: fieldName === 'contactPhone' ? value : agentData.contactPhone,
            location: fieldName === 'location' ? value : agentData.location,
            workingHours: fieldName === 'workingHours' ? value : agentData.workingHours,
            services: fieldName === 'services' ? value : agentData.services,
            paymentMethods: fieldName === 'paymentMethods' ? value : agentData.paymentMethods,
            hasDelivery: fieldName === 'hasDelivery' ? value : agentData.hasDelivery,
            acceptsReservations: fieldName === 'acceptsReservations' ? value : agentData.acceptsReservations
          };
          showConfigStepDirect(nextStep, defaultData, configSteps);
        } else {
          // Configura√ß√£o conclu√≠da
          setConfigSteps([]); // Reset
          setCurrentConfigStep(0);
          completeStepByStepConfig();
        }
      }, 1500);
      
      return;
    }
    
    // Processar a√ß√µes r√°pidas dos bot√µes
    if (value.startsWith('auto_')) {
      const businessType = value.replace('auto_', '');
      applyIntelligentConfig(businessType);
      return;
    }

    // Processar outras a√ß√µes interativas
    switch (value) {
      case 'tell_profession':
        const askProfession: Message = {
          id: Date.now().toString(),
          content: 'üë©‚Äçüíº Perfeito! Me conta qual √© a sua profiss√£o ou tipo de neg√≥cio. Por exemplo: "sou dentista", "tenho uma pizzaria", "trabalho com cabelo"...',
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, askProfession]);
        return;

      case 'see_prices':
        handleChat('quanto custa');
        return;
        
      case 'start_now':
        handleChat('quero come√ßar a configurar meu neg√≥cio agora');
        return;

      case 'test_now':
      case 'test_first':
      case 'test_whatsapp':
        // Verificar se j√° existe um simulador nas mensagens
        const hasExistingWhatsApp = messages.some(msg => msg.type === 'whatsapp');
        if (hasExistingWhatsApp) {
          // N√£o fazer nada se j√° tem um simulador aberto
          return;
        }
        
        // Confirmar que vai testar
        const testConfirmMessage: Message = {
          id: generateUniqueId(),
          content: 'Iniciando teste do seu funcion√°rio virtual...\n\nVou abrir o simulador de WhatsApp para voc√™ ver como ficou:',
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, testConfirmMessage]);
        
        // Mostrar simulador de WhatsApp na pr√≥xima linha (ap√≥s pequeno delay)
        setTimeout(() => {
          // Verificar novamente se n√£o foi criado nenhum simulador nesse per√≠odo
          setMessages(prev => {
            const hasWhatsApp = prev.some(msg => msg.type === 'whatsapp');
            if (!hasWhatsApp) {
              const whatsappTestMessage: Message = {
                id: generateUniqueId(),
                content: 'Teste seu atendente virtual:',
                sender: 'assistant',
                timestamp: new Date(),
                type: 'whatsapp'
              };
              return [...prev, whatsappTestMessage];
            }
            return prev;
          });
        }, 1500);
        return;
        
      case 'connect_whatsapp':
      case 'connect_direct':
      case 'connect_now':
        // Disparar evento para mostrar o banner de conex√£o com WhatsApp 
        const connectEvent = new CustomEvent('openConnectWhatsApp', {
          detail: { 
            businessName: agentData.businessName,
            businessType: agentData.businessType
          }
        });
        window.dispatchEvent(connectEvent);
        
        const whatsappConnectMessage: Message = {
          id: Date.now().toString(),
          content: `**üì± Conectar ao WhatsApp**

        Para conectar seu FuncionarioPro ao WhatsApp:

1. ‚úÖ **Escolha um plano** - Temos op√ß√µes que cabem no seu or√ßamento
2. ‚úÖ **QR Code** - Escaneie com seu celular
3. ‚úÖ **Verifica√ß√£o** - Confirme a conex√£o
4. ‚úÖ **Pronto!** - Funcion√°rio ativo 24h`,
          sender: 'assistant',
          timestamp: new Date(),
          type: 'field',
          fieldData: {
            fieldName: 'connectOption',
            fieldLabel: 'Op√ß√£o de Conex√£o',
            fieldType: 'buttons',
            options: [
              { value: 'plan_free', label: 'üÜì Teste Gr√°tis 7 dias' },
              { value: 'plan_starter', label: 'üíº Plano Mensal R$49,90' },
              { value: 'plan_annual', label: 'üî• Anual R$39,90/m√™s' }
            ]
          }
        };
        setMessages(prev => [...prev, whatsappConnectMessage]);
        return;
        
      case 'edit_config':
        const editMessage: Message = {
          id: Date.now().toString(),
          content: `**‚úèÔ∏è Editar Configura√ß√£o**

O que voc√™ gostaria de alterar?`,
          sender: 'assistant',
          timestamp: new Date(),
          type: 'field',
          fieldData: {
            fieldName: 'editField',
            fieldLabel: 'Campo para Editar',
            fieldType: 'buttons',
            options: [
              { value: 'edit_businessName', label: 'üè∑Ô∏è Nome do neg√≥cio' },
              { value: 'edit_contactPhone', label: 'üìû Telefone' },
              { value: 'edit_location', label: 'üìç Localiza√ß√£o' },
              { value: 'edit_workingHours', label: 'üïí Hor√°rios' },
              { value: 'edit_services', label: 'üçï Servi√ßos' },
              { value: 'edit_paymentMethods', label: 'üí≥ Pagamentos' }
            ]
          }
        };
        setMessages(prev => [...prev, editMessage]);
        return;

      case 'show_details':
        const detailsMessage: Message = {
          id: Date.now().toString(),
          content: `**üìã O que ser√° configurado automaticamente:**

**‚è∞ HOR√ÅRIOS:** Baseado na sua √°rea de atua√ß√£o
**üõç SERVI√áOS:** Principais servi√ßos da profiss√£o  
**üí≥ PAGAMENTOS:** M√©todos mais usados no setor
**üìÖ FUNCIONALIDADES:** Agendamento ou delivery conforme o tipo

**‚ú® Voc√™ poder√° ajustar tudo depois!**`,
          sender: 'assistant',
          timestamp: new Date(),
          type: 'field',
          fieldData: {
            fieldName: 'afterDetails',
            fieldLabel: 'Pr√≥xima A√ß√£o',
            fieldType: 'buttons',
            options: [
              { value: 'proceed_auto', label: '‚úÖ Ok, configure!' },
              { value: 'manual_config', label: '‚úã Fazer manual' }
            ]
          }
        };
        setMessages(prev => [...prev, detailsMessage]);
        return;

      case 'clinica':
      case 'restaurante':
      case 'salao':
      case 'oficina':
      case 'loja':
      case 'academia':
      case 'petshop':
      case 'farmacia':
      case 'escola':
        // Iniciar configura√ß√£o passo a passo diretamente
        startStepByStepConfig(value);
        return;

      case 'outro':
        const otherTypeMessage: Message = {
          id: Date.now().toString(),
          content: `**üíº Perfeito! Vou te ajudar com seu neg√≥cio personalizado.**

**Primeiro, me conta:** Voc√™ trabalha mais com produtos ou servi√ßos?`,
          sender: 'assistant',
          timestamp: new Date(),
          type: 'field',
          fieldData: {
            fieldName: 'businessCategory',
            fieldLabel: 'Categoria do Neg√≥cio',
            fieldType: 'buttons',
            options: [
              { value: 'produtos', label: 'üì¶ Vendo produtos' },
              { value: 'servicos', label: 'üîß Ofere√ßo servi√ßos' },
              { value: 'ambos', label: 'üè™ Produtos e servi√ßos' }
            ]
          }
        };
        setMessages(prev => [...prev, otherTypeMessage]);
        return;

      case 'produtos':
      case 'servicos':
      case 'ambos':
        const businessDescMessage: Message = {
          id: Date.now().toString(),
          content: `**‚ú® Agora me conta qual √© seu neg√≥cio espec√≠fico:**

Por exemplo:
${value === 'produtos' ? 
  '‚Ä¢ "Vendo roupas femininas"\n‚Ä¢ "Trabalho com eletr√¥nicos"\n‚Ä¢ "Tenho uma doceria"' :
  value === 'servicos' ?
  '‚Ä¢ "Sou arquiteto"\n‚Ä¢ "Trabalho com eventos"\n‚Ä¢ "Ofere√ßo aulas particulares"' :
  '‚Ä¢ "Tenho uma autoescola"\n‚Ä¢ "Loja de carros com oficina"\n‚Ä¢ "Vendo e instalo ar condicionado"'
}

Vou entender e configurar tudo automaticamente! üòä`,
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, businessDescMessage]);
        return;

      case 'how_works':
        const howWorksMessage: Message = {
          id: Date.now().toString(),
          content: `**‚ùì COMO FUNCIONA O FUNCIONARIOPRO:**

**ü§ñ 1. CONFIGURA√á√ÉO SIMPLES (2 minutos)**
‚Ä¢ Voc√™ me conta seu tipo de neg√≥cio
‚Ä¢ Eu configuro automaticamente tudo para voc√™
‚Ä¢ Hor√°rios, servi√ßos, formas de pagamento, etc.

**üì± 2. CONEX√ÉO COM WHATSAPP**
‚Ä¢ Conectamos oficialmente ao seu WhatsApp Web
‚Ä¢ Seu n√∫mero continua o mesmo
‚Ä¢ Voc√™ recebe todas as conversas no seu celular

**‚ö° 3. ATENDIMENTO AUTOM√ÅTICO 24H**
‚Ä¢ Clientes fazem pedidos a qualquer hora
‚Ä¢ Sistema agenda consultas automaticamente
‚Ä¢ Responde perguntas frequentes na hora
‚Ä¢ Voc√™ s√≥ atende casos que precisam de voc√™

**üìà 4. RESULTADOS REAIS:**
‚Ä¢ 300% mais vendas em m√©dia
‚Ä¢ 80% menos tempo perdido com atendimento
‚Ä¢ Zero clientes perdidos por falta de resposta
‚Ä¢ Funciona mesmo voc√™ dormindo!

**üí∞ 5. INVESTIMENTO BAIXO:**
‚Ä¢ Teste 7 dias GR√ÅTIS
‚Ä¢ A partir de R$ 49,90/m√™s
‚Ä¢ Sem contrato de fidelidade
‚Ä¢ Cancela quando quiser`,
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, howWorksMessage]);

        setTimeout(() => {
          const howWorksButtons: Message = {
            id: generateUniqueId(),
            content: `**üöÄ Ficou interessado?**`,
            sender: 'assistant',
            timestamp: new Date(),
            type: 'field',
            fieldData: {
              fieldName: 'afterHowWorks',
              fieldLabel: 'Pr√≥ximo Passo',
              fieldType: 'buttons',
              options: [
                { value: 'start_config', label: '‚öôÔ∏è Quero configurar agora' },
                { value: 'test_free', label: 'üß™ Fazer teste gr√°tis' },
                { value: 'see_prices', label: 'üí∞ Ver pre√ßos' },
                { value: 'talk_human', label: 'üí¨ Falar com consultor' }
              ]
            }
          };
          setMessages(prev => [...prev, howWorksButtons]);
                 }, 2000);
         return;

      case 'start_config':
        handleChat('quero configurar meu neg√≥cio');
        return;

      case 'change_template':
        setShowTemplates(true);
        const backToTemplatesMessage: Message = {
          id: Date.now().toString(),
          content: 'üîÑ **Voltando aos templates...**\n\nEscolha novamente o tipo do seu neg√≥cio:',
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, backToTemplatesMessage]);
        return;

      case 'manual_config':
        const manualMessage: Message = {
          id: Date.now().toString(),
          content: '‚úèÔ∏è **Configura√ß√£o manual selecionada!**\n\nVamos come√ßar pelo b√°sico. Me conte qual √© o nome do seu neg√≥cio?',
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, manualMessage]);
        setConfigData({ ...configData, isConfiguring: true });
        setCurrentStep(0);
        setTimeout(() => setConfigData({ ...configData, isShowingField: true }), 1000);
        return;

      case 'config_business':
        const askBusinessMessage: Message = {
          id: Date.now().toString(),
          content: 'üë©‚Äçüíº Perfeito! Me conta qual √© a sua profiss√£o ou tipo de neg√≥cio. Por exemplo: "sou dentista", "tenho uma pizzaria", "trabalho com cabelo"...',
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, askBusinessMessage]);
        return;

      case 'test_system':
        handleChat('quero testar o sistema');
        return;

      case 'more_info':
        const moreInfoMessage: Message = {
          id: Date.now().toString(),
          content: `**üìö FUNCIONARIOPRO - INFORMA√á√ïES COMPLETAS:**

**üéØ O QUE ELE FAZ:**
Cria um funcion√°rio virtual que atende seus clientes no WhatsApp 24h por dia, 7 dias por semana. Ele agenda consultas, responde perguntas, recebe pedidos e muito mais!

**üí∞ INVESTIMENTO:**
‚Ä¢ **Teste Gr√°tis:** 7 dias - R$ 0,00
‚Ä¢ **Profissional:** R$ 49,90/m√™s  
‚Ä¢ **Empresarial:** R$ 149,90/m√™s

**üìà RESULTADOS REAIS:**
‚Ä¢ 300% de aumento nas vendas
‚Ä¢ 80% menos tempo gasto com atendimento
‚Ä¢ 24h de disponibilidade
‚Ä¢ Zero clientes perdidos

**üîß COMO FUNCIONA:**
1. Voc√™ configura (2 minutos)
2. Conectamos ao WhatsApp
3. Clientes s√£o atendidos automaticamente
4. Voc√™ s√≥ cuida dos casos complexos`,
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, moreInfoMessage]);

        setTimeout(() => {
          const ctaAfterInfo: Message = {
            id: (Date.now() + 1).toString(),
            content: `**üöÄ Ficou interessado?**`,
            sender: 'assistant',
            timestamp: new Date(),
            type: 'field',
            fieldData: {
              fieldName: 'afterInfo',
              fieldLabel: 'Pr√≥ximo Passo',
              fieldType: 'buttons',
              options: [
                { value: 'start_now', label: '‚úÖ Quero come√ßar agora' },
                { value: 'test_first', label: 'üß™ Fazer teste gr√°tis' },
                { value: 'talk_human', label: 'üí¨ Falar com consultor' }
              ]
            }
          };
          setMessages(prev => [...prev, ctaAfterInfo]);
                 }, 2000);
        return;

      case 'edit_info':
        const editFieldsMessage: Message = {
          id: Date.now().toString(),
          content: '‚úèÔ∏è **Escolha o campo que deseja editar:**',
          sender: 'assistant',
          timestamp: new Date(),
          type: 'field',
          fieldData: {
            fieldName: 'editField',
            fieldLabel: 'Campo para Editar',
            fieldType: 'buttons',
            options: [
              { value: 'edit_businessName', label: 'üè¢ Nome do neg√≥cio' },
              { value: 'edit_contactPhone', label: 'üì± WhatsApp' },
              { value: 'edit_location', label: 'üìç Endere√ßo' },
              { value: 'edit_workingHours', label: '‚è∞ Hor√°rios' },
              { value: 'edit_services', label: 'üõç Servi√ßos' },
              { value: 'edit_paymentMethods', label: 'üí≥ Pagamento' }
            ]
          }
        };
        setMessages(prev => [...prev, editFieldsMessage]);
        return;

      case 'connect_now':
        const connectMessage: Message = {
          id: Date.now().toString(),
          content: 'üì± **Para conectar ao WhatsApp:**\n\n1Ô∏è‚É£ Voc√™ precisa de uma assinatura ativa\n2Ô∏è‚É£ N√≥s faremos a conex√£o oficial para voc√™\n3Ô∏è‚É£ Em 5 minutos estar√° funcionando\n\nüí∞ **Planos dispon√≠veis:**\n‚Ä¢ **Teste Gr√°tis:** 7 dias - R$ 0,00\n‚Ä¢ **Profissional:** R$ 49,90/m√™s\n‚Ä¢ **Empresarial:** R$ 149,90/m√™s',
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, connectMessage]);

                 setTimeout(() => {
           const planButtons: Message = {
             id: (Date.now() + 1).toString(),
             content: `**üí≥ Escolha seu plano:**`,
             sender: 'assistant',
             timestamp: new Date(),
             type: 'field',
             fieldData: {
               fieldName: 'choosePlan',
               fieldLabel: 'Plano',
               fieldType: 'buttons',
               options: [
                 { value: 'test_free', label: 'üÜì Teste 7 dias gr√°tis' },
                 { value: 'plan_starter', label: 'üíº Starter R$ 47,00' },
                 { value: 'plan_pro', label: 'üöÄ Pro R$ 97,00' },
                 { value: 'plan_enterprise', label: 'üè¢ Enterprise R$ 197,00' }
               ]
             }
           };
           setMessages(prev => [...prev, planButtons]);
         }, 1500);
        return;

      case 'see_preview':
        const previewMessage: Message = {
          id: Date.now().toString(),
          content: `üìã **RESUMO DA CONFIGURA√á√ÉO:**

**üè¢ NEG√ìCIO:** ${agentData.businessName}
**üì± WHATSAPP:** ${agentData.contactPhone}
**üìç ENDERE√áO:** ${agentData.location}

**‚è∞ HOR√ÅRIOS:**
${agentData.workingHours}

**üõç SERVI√áOS:**
${agentData.services}

**üí≥ PAGAMENTOS:** ${agentData.paymentMethods}
**üöö DELIVERY:** ${agentData.hasDelivery ? 'Sim ‚úÖ' : 'N√£o ‚ùå'}
**üìÖ AGENDAMENTOS:** ${agentData.acceptsReservations ? 'Sim ‚úÖ' : 'N√£o ‚ùå'}

**üí¨ MENSAGEM DE BOAS-VINDAS:**
"${agentData.welcomeMessage}"`,
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, previewMessage]);
        return;

      // Cases para edi√ß√£o inline
      case 'edit_businessName':
      case 'edit_contactPhone':
      case 'edit_location':
      case 'edit_workingHours':
      case 'edit_services':
      case 'edit_paymentMethods':
        const fieldToEdit = value.replace('edit_', '');
        const fieldLabels = {
          'businessName': 'Nome do neg√≥cio',
          'contactPhone': 'WhatsApp',
          'location': 'Endere√ßo',
          'workingHours': 'Hor√°rios de funcionamento',
          'services': 'Produtos/Servi√ßos',
          'paymentMethods': 'Formas de pagamento'
        };
        const currentValue = agentData[fieldToEdit as keyof AgentData] as string || '';
        
        const editInlineMessage: Message = {
          id: Date.now().toString(),
          content: `‚úèÔ∏è **Editando: ${fieldLabels[fieldToEdit]}**\n\n**Valor atual:** ${currentValue || 'N√£o definido'}\n\n**Digite o novo valor:**`,
          sender: 'assistant',
          timestamp: new Date(),
          type: 'field',
          fieldData: {
            fieldName: fieldToEdit,
            fieldLabel: fieldLabels[fieldToEdit],
            fieldType: fieldToEdit === 'workingHours' || fieldToEdit === 'services' ? 'textarea' : 'text',
            placeholder: `Digite ${fieldLabels[fieldToEdit].toLowerCase()}`,
            currentValue: currentValue,
            isEditing: true
          }
        };
                 setMessages(prev => [...prev, editInlineMessage]);
         return;

      // Cases para planos
      case 'test_free':
        const freeTestMessage: Message = {
          id: Date.now().toString(),
          content: `**üÜì TESTE GR√ÅTIS SELECIONADO!**

Perfeito! Voc√™ ter√° 7 dias para testar todas as funcionalidades sem pagar nada.

**O que voc√™ ganha:**
‚úÖ Configura√ß√£o completa do seu funcion√°rio IA
‚úÖ Conex√£o com WhatsApp Web
‚úÖ Atendimento autom√°tico 24h
‚úÖ At√© 500 mensagens gratuitas
‚úÖ Suporte completo

**Para ativar seu teste gratuito, preciso apenas:**
üì± Confirmar seu WhatsApp: ${agentData.contactPhone || '(11) 99999-9999'}
üìß Seu melhor email para login

**Posso ativar agora mesmo!**`,
          sender: 'assistant',
          timestamp: new Date(),
          type: 'field',
          fieldData: {
            fieldName: 'confirmFreeTest',
            fieldLabel: 'Ativar Teste',
            fieldType: 'buttons',
            options: [
              { value: 'activate_free', label: '‚úÖ Ativar teste gr√°tis' },
              { value: 'need_info', label: 'üìã Preciso de mais infos' }
            ]
          }
        };
        setMessages(prev => [...prev, freeTestMessage]);
        return;

      case 'plan_starter':
      case 'plan_pro': 
      case 'plan_enterprise':
        // Disparar evento para abrir modal de pagamento
        const planDetails = {
          'plan_starter': { name: 'Starter', price: 47 },
          'plan_pro': { name: 'Pro', price: 97 },
          'plan_enterprise': { name: 'Enterprise', price: 197 }
        };
        
        const plan = planDetails[value];
        const paymentEvent = new CustomEvent('openPaymentModal', {
          detail: { plan }
        });
        window.dispatchEvent(paymentEvent);
        
        const planSelectedMessage: Message = {
          id: Date.now().toString(),
          content: `**üí≥ Plano ${plan.name} selecionado!**\n\nAbrindo op√ß√µes de pagamento...`,
          sender: 'assistant',
          timestamp: new Date()
        };
        setMessages(prev => [...prev, planSelectedMessage]);
        return;

      case 'reset_config':
        // Limpar dados salvos
        try {
          sessionStorage.removeItem('functionarioIA_data');
        } catch (e) {
          console.error('Erro ao limpar dados da sess√£o:', e);
        }
        
        // Limpar estado
        onAgentUpdate({
          businessName: '',
          businessType: '',
          businessInfo: '',
          personality: '',
          welcomeMessage: '',
          template: '',
          workingHours: '',
          services: '',
          location: '',
          paymentMethods: '',
          contactPhone: '',
          hasDelivery: false,
          acceptsReservations: false
        });
        
        // Reiniciar o fluxo
        setShowTemplates(true);
        setMessages([]);
        setConfigData({ ...configData, isConfiguring: false });
        setCurrentStep(0);
        return;
     }

     // Continuar com l√≥gica original se n√£o for a√ß√£o especial
    const field = CONFIG_FIELDS[currentStep];
    
    // Reset do estado para evitar conflitos
    setConfigData({ ...configData, isShowingField: false });
    
    // Remover todas as mensagens de field para evitar duplica√ß√£o
    setMessages(prev => prev.filter(msg => msg.type !== 'field'));
    
    // Adicionar mensagem de confirma√ß√£o do usu√°rio
    const userMessage: Message = {
      id: Date.now().toString(),
      content: value,
      sender: 'user',
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    // Atualizar os dados primeiro
    const updateData = {
      [field.step]: field.step === 'hasDelivery' || field.step === 'acceptsReservations' 
        ? value === 'true' 
        : value
    };
    
    onAgentUpdate(updateData);
    
    // Aguardar a atualiza√ß√£o e ent√£o incrementar o step
    setTimeout(() => {
      setCurrentStep(prev => prev + 1);
      setTimeout(() => {
        setConfigData({ ...configData, isShowingField: true });
      }, 150);
    }, 100);
  };

  const completeConfiguration = () => {
    setConfigData({ ...configData, isConfiguring: false });
    
    // Salvar dados na sess√£o
    try {
      sessionStorage.setItem('functionarioIA_data', JSON.stringify(agentData));
    } catch (e) {
      console.error('Erro ao salvar dados na sess√£o:', e);
    }
    
    // Primeiro mostrar mensagem de conclus√£o
    const completionMessage: Message = {
      id: Date.now().toString(),
              content: `Pronto!\n\nSeu FuncionarioPro est√° configurado.\n\nPr√≥ximos passos:\n‚Ä¢ Use "Conectar WhatsApp" para ativar em produ√ß√£o\n‚Ä¢ Quer alterar algo? √â s√≥ dizer!`,
      sender: 'assistant',
      timestamp: new Date(),
      type: 'field',
      fieldData: {
        fieldName: 'afterConfiguration',
        fieldLabel: 'Pr√≥xima A√ß√£o',
        fieldType: 'buttons',
        options: [
          { value: 'test_now', label: 'Testar no simulador' },
          { value: 'connect_whatsapp', label: 'Conectar WhatsApp' },
          { value: 'edit_config', label: 'Editar configura√ß√£o' }
        ]
      }
    };
    setMessages(prev => [...prev, completionMessage]);
    
    // Ap√≥s 2 segundos, mostrar automaticamente o simulador de WhatsApp apenas uma vez
    setTimeout(() => {
      // Verificar se j√° n√£o existe um simulador nas mensagens
      const hasWhatsApp = messages.some(msg => msg.type === 'whatsapp');
      if (!hasWhatsApp) {
        const whatsappMessage: Message = {
          id: generateUniqueId(),
          content: 'Teste seu funcion√°rio virtual:',
          sender: 'assistant',
          timestamp: new Date(),
          type: 'whatsapp'
        };
        setMessages(prev => [...prev, whatsappMessage]);
      }
    }, 2000);
  };

  useEffect(() => {
    // Carregar dados salvos da sess√£o ao inicializar
    try {
      const savedData = sessionStorage.getItem('functionarioIA_data');
      if (savedData) {
        const parsedData = JSON.parse(savedData);
        onAgentUpdate(parsedData);
      }
    } catch (e) {
      console.error('Erro ao carregar dados da sess√£o:', e);
    }
  }, []);

  // Salvamento autom√°tico sempre que agentData muda
  useEffect(() => {
    if (agentData.businessName || agentData.businessType || agentData.contactPhone) {
      try {
        sessionStorage.setItem('functionarioIA_data', JSON.stringify(agentData));
      } catch (e) {
        console.error('Erro ao salvar dados na sess√£o:', e);
      }
    }
  }, [agentData]);



  return (
    <div className="flex-1 flex flex-col h-full min-h-0">
      {/* Chat Container - SEM HEADER - com altura m√≠nima 0 para permitir overflow */}
      <div className="flex-1 overflow-y-auto overflow-x-hidden bg-white min-h-0">
        <div className="w-full max-w-full md:max-w-2xl mx-auto px-3 md:px-4 py-3 md:py-4 space-y-3 md:space-y-4 pb-8 md:pb-6">
      {showTemplates ? (
        renderTemplates()
      ) : (
        <>
              {messages.map((message) => (
                <div key={message.id} className="mb-3 md:mb-4">
                  <div className="flex items-start gap-2 md:gap-4 w-full">
                    <div className="w-6 h-6 md:w-8 md:h-8 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                      {message.sender === 'assistant' ? (
                        <div className="w-6 h-6 md:w-8 md:h-8 bg-black rounded-full flex items-center justify-center">
                          <Bot className="w-3 h-3 md:w-4 md:h-4 text-white" />
                        </div>
                      ) : (
                        <div className="w-6 h-6 md:w-8 md:h-8 bg-gray-700 rounded-full flex items-center justify-center">
                          <User className="w-3 h-3 md:w-4 md:h-4 text-white" />
                        </div>
                      )}
                    </div>
                    
                    <div className="flex-1 min-w-0 overflow-hidden">
                      {(!message.type || message.type === 'text' || message.type === 'completion') && (
                        <div className="text-xs md:text-base text-gray-900 leading-relaxed whitespace-pre-wrap break-words word-break">
                          {message.content}
                        </div>
                      )}

                      {message.type === 'field' && message.fieldData && (
                        <div className="w-full">
                          <div className="text-xs md:text-base text-gray-900 leading-relaxed whitespace-pre-wrap mb-3 break-words word-break">
                            {message.content}
                          </div>
                          <div className="w-full overflow-hidden">
                          <InlineFieldInput
                            fieldName={message.fieldData.fieldName}
                            fieldLabel={message.fieldData.fieldLabel}
                            fieldType={message.fieldData.fieldType}
                            placeholder={message.fieldData.placeholder}
                            currentValue={message.fieldData.currentValue}
                            onSubmit={handleFieldResponse}
                            onCancel={() => {
                              setMessages(prev => prev.filter(m => m.id !== message.id));
                            }}
                            options={message.fieldData.options}
                          />
                          </div>
                        </div>
                      )}

                      {message.type === 'whatsapp' && (
                        <div className="w-full">
                          <div className="text-xs md:text-base text-gray-900 leading-relaxed whitespace-pre-wrap mb-2 break-words word-break">
                            {message.content}
                          </div>
                          {/* WhatsApp Simulator SEM container cinza - alinhado √† esquerda */}
                          <div className="w-full max-w-[280px] md:max-w-sm">
                            <div className="flex items-center justify-between mb-1">
                              <span className="text-xs text-gray-600">WhatsApp Simulator</span>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => {
                                  setMessages(prev => prev.filter(m => m.id !== message.id));
                                }}
                                className="h-5 w-5 p-0 text-gray-400 hover:text-gray-600"
                              >
                                <X className="h-3 w-3" />
                              </Button>
                            </div>
                              <WhatsAppSimulator 
                                agentData={agentData} 
                                onClose={() => {
                                  setMessages(prev => prev.filter(m => m.id !== message.id));
                                }}
                              />
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}

              {isLoading && (
                <div className="mb-3 md:mb-4">
                  <div className="flex items-start gap-2 md:gap-4">
                    <div className="w-6 h-6 md:w-8 md:h-8 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                      <div className="w-6 h-6 md:w-8 md:h-8 bg-black rounded-full flex items-center justify-center animate-pulse">
                        <Bot className="w-3 h-3 md:w-4 md:h-4 text-white" />
                      </div>
                    </div>
                    <div className="flex items-center space-x-1 text-gray-500 mt-2">
                      <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
        </>
      )}
        </div>
      </div>

      {/* Input Area - S√ì APARECE AP√ìS PRIMEIRA INTERA√á√ÉO */}
      {!showTemplates && (
        <div className="fixed bottom-0 left-0 right-0 md:static border-t border-gray-200 bg-white p-3 md:p-4 z-10">
          <div className="w-full max-w-2xl mx-auto px-1 md:px-0">
            <div className="flex items-center gap-2">
              <div className="flex-1 relative">
                <input
                  type="text"
              value={currentMessage}
              onChange={(e) => setCurrentMessage(e.target.value)}
              onKeyPress={handleKeyPress}
                  placeholder="Digite sua mensagem..."
                  className="w-full px-3 py-3 md:py-3 pr-10 bg-gray-50 border border-gray-300 rounded-lg text-sm md:text-base
                    focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent
                    placeholder-gray-500"
            />
            <button
              onClick={() => sendMessage()}
              disabled={!currentMessage.trim() || isLoading}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 
                    bg-black hover:bg-gray-800 disabled:bg-gray-300 
                    text-white rounded-lg p-1.5 md:p-2 transition-colors"
            >
                  {isLoading ? (
                    <div className="animate-spin rounded-full h-3 w-3 md:h-4 md:w-4 border-2 border-white border-t-transparent"></div>
                  ) : (
                    <svg className="w-3 h-3 md:w-4 md:w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                  )}
            </button>
          </div>
        </div>
      </div>
        </div>
      )}
    </div>
  );
};

export default CalibrationChat; 